const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken'); // JWT kütüphanesini içe aktarın
const helmet = require('helmet'); // Helmet kütüphanesini içe aktarın

// Ortam ayarları
const port = process.env.PORT || 3000; // Port numarası

// Veritabanı bağlantı adresi (Replit'in dahili MongoDB'sini kullanıyorsanız, bu satırı değiştirebilirsiniz)
const mongoURI = 'mongodb://localhost:27017/social-cybersecurity'; 

// MongoDB'ye bağlanma
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB'ye başarıyla bağlandı.'))
  .catch(err => console.error('MongoDB bağlantı hatası:', err));

// Görünüm motoru ayarları
app.set('view engine', 'ejs'); // EJS'yi görünüm motoru olarak kullanın
app.set('views', __dirname + '/views'); // Görünüm dosyalarının konumu

// Statik dosya (CSS, JS) ayarları
app.use(express.static(__dirname + '/public')); // 'public' klasörünü statik dosya sunucusu olarak kullanın

// Gönderi işleme
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json()); 

// Kullanıcı modeli
const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  // Profil Bilgileri
  name: { type: String, required: true },
  bio: { type: String },
  // Profil Resim URL'si
  profilePicture: { type: String },
  // Diğer özellikler
  following: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  followers: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }] 
});

// Şifre hash'leme
UserSchema.pre('save', async function(next) {
  if (this.isModified('password')) {
    this.password = await bcrypt.hash(this.password, 10);
  }
  next();
});

// Şifre karşılaştırma
UserSchema.methods.validatePassword = async function(password) {
  return await bcrypt.compare(password, this.password);
};

const User = mongoose.model('User', UserSchema);

// Gönderi modeli
const PostSchema = new mongoose.Schema({
  content: { type: String, required: true },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  createdAt: { type: Date, default: Date.now },
  likes: { type: Number, default: 0 },
  comments: [{
    author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    content: { type: String, required: true },
    createdAt: { type: Date, default: Date.now }
  }]
});

const Post = mongoose.model('Post', PostSchema);

// JWT gizli anahtarı
const secretKey = 'gizli-anahtar'; // Bu anahtarı asla kodda açık şekilde saklamayın!

// Giriş rotası
app.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(401).json({ message: 'Kullanıcı adı veya şifre yanlış.' });
    }
    // Şifreleri karşılaştırma
    if (!await user.validatePassword(password)) {
      return res.status(401).json({ message: 'Kullanıcı adı veya şifre yanlış.' });
    }
    // JWT oluşturma
    const token = jwt.sign({ userId: user._id }, secretKey, { expiresIn: '1h' }); 
    res.status(200).json({ message: 'Giriş başarılı.', token }); // Token'ı gönderin
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Giriş sırasında bir hata oluştu.' });
  }
});

// Orta yazılım (middleware): Her istekte JWT'yi doğrulama
app.use(async (req, res, next) => {
  const token = req.header('Authorization'); // Authorization başlığını alın
  if (token) {
    try {
      const decoded = jwt.verify(token, secretKey); // Tokeni doğrulayın
      req.user = await User.findById(decoded.userId); // Kullanıcıyı bulun
      next(); // Sonraki orta yazılıma geçin
    } catch (error) {
      return res.status(401).json({ message: 'Geçersiz token.' });
    }
  } else {
    next(); // Token yoksa sonraki orta yazılıma geçin (örneğin, kayıt rotası için)
  }
});

// Helmet'i kullanarak güvenlik başlıklarını ayarlama
app.use(helmet());

// Ana sayfa rotası
app.get('/', (req, res) => {
  res.render('index'); 
});

// Kayıt rotası
app.post('/register', async (req, res) => {
  try {
    const { username, password, name, email } = req.body;
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: 'Bu kullanıcı adı zaten kullanılıyor.' });
    }
    // Giriş verilerini güvenli hale getirme
    const escapedUsername = mongoose.escape(username); // Kullanıcı adı güvenli hale getiriliyor
    const escapedPassword = mongoose.escape(password); // Şifre güvenli hale getiriliyor
    const escapedName = mongoose.escape(name); // Ad güvenli hale getiriliyor
    const escapedEmail = mongoose.escape(email); // E-posta güvenli hale getiriliyor
    
    const newUser = new User({
      username: escapedUsername, 
      password: escapedPassword, 
      name: escapedName, 
      email: escapedEmail 
    });
    await newUser.save();
    res.status(201).json({ message: 'Kayıt başarılı.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Kayıt sırasında bir hata oluştu.' });
  }
});


// Kullanıcı profilini görüntüle
app.get('/profile/:username', async (req, res) => {
  try {
    const username = req.params.username;
    const user = await User.findOne({ username }).populate('following').populate('followers'); // Takip edenleri ve takipçileri de getir
    if (!user) {
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }
    res.render('profile', { user }); 
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Profil sayfayı getiremedi.' });
  }
});

// Gönderi paylaşma (JWT koruması eklendi)
app.post('/post', async (req, res) => {
  try {
    // ... (Önceki kodlar)
    // JWT koruması: req.user'ı kullanarak oturum açmış kullanıcının kimliğini doğrulan
    const author = req.user;
    const { content } = req.body;
    const escapedContent = mongoose.escape(content); // Gönderi içeriği güvenli hale getiriliyor
    const newPost = new Post({ content: escapedContent, author }); 
    await newPost.save();
    res.status(201).json({ message: 'Gönderi başarıyla paylaşıldı.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Gönderi paylaşımı sırasında bir hata oluştu.' });
  }
});

// Gönderileri listeleme
app.get('/posts', async (req, res) => {
  try {
    const posts = await Post.find().populate('author').sort({ createdAt: -1 });
    res.render('posts', { posts });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Gönderiler listelenemedi.' });
  }
});

// Bir gönderiyi beğenme
app.post('/post/:postId/like', async (req, res) => {
  try {
    const postId = req.params.postId;
    const post = await Post.findById(postId);
    if (!post) {
      return res.status(404).json({ message: 'Gönderi bulunamadı.' });
    }
    post.likes++;
    await post.save();
    res.status(200).json({ message: 'Gönderi beğenildi.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Gönderiyi beğenirken bir hata oluştu.' });
  }
});

// Bir gönderiden beğeniyi kaldırma
app.post('/post/:postId/unlike', async (req, res) => {
  try {
    const postId = req.params.postId;
    const post = await Post.findById(postId);
    if (!post) {
      return res.status(404).json({ message: 'Gönderi bulunamadı.' });
    }
    if (post.likes > 0) {
      post.likes--;
      await post.save();
      res.status(200).json({ message: 'Gönderiden beğeni kaldırıldı.' });
    } else {
      res.status(400).json({ message: 'Bu gönderi zaten beğenilmemiş.' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Gönderiden beğeni kaldırılırken bir hata oluştu.' });
  }
});

// Bir gönderiye yorum ekleme
app.post('/post/:postId/comment', async (req, res) => {
  try {
    const postId = req.params.postId;
    const { content } = req.body;
    const author = req.user; // Oturum açmış kullanıcı
    const post = await Post.findById(postId);
    if (!post) {
      return res.status(404).json({ message: 'Gönderi bulunamadı.' });
    }
    const escapedContent = mongoose.escape(content); // Yorum içeriği güvenli hale getiriliyor
    post.comments.push({ author, content: escapedContent });
    await post.save();
    res.status(201).json({ message: 'Yorum başarıyla eklendi.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Yorum eklenirken bir hata oluştu.' });
  }
});

// Bir kullanıcıyı takip etme
app.post('/user/:username/follow', async (req, res) => {
  try {
    const username = req.params.username;
    const userToFollow = await User.findOne({ username });
    if (!userToFollow) {
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }
    const currentUser = req.user;
    currentUser.following.push(userToFollow._id);
    userToFollow.followers.push(currentUser._id); // Takipçiyi takip edilen kullanıcının takipçi listesine ekle
    await currentUser.save();
    await userToFollow.save();
    res.status(200).json({ message: 'Kullanıcı takip edildi.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Kullanıcı takip edilirken bir hata oluştu.' });
  }
});

// Bir kullanıcıyı takipten çıkarma
app.post('/user/:username/unfollow', async (req, res) => {
  try {
    const username = req.params.username;
    const userToUnfollow = await User.findOne({ username });
    if (!userToUnfollow) {
      return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
    }
    const currentUser = req.user;
    currentUser.following = currentUser.following.filter(id => id.toString() !== userToUnfollow._id.toString());
    userToUnfollow.followers = userToUnfollow.followers.filter(id => id.toString() !== currentUser._id.toString()); // Takipçiyi takip edilen kullanıcının takipçi listesinden çıkar
    await currentUser.save();
    await userToFollow.save();
    res.status(200).json({ message: 'Kullanıcı takipten çıkarıldı.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Kullanıcı takipten çıkarılırken bir hata oluştu.' });
  }
});

// Sunucu başlatma
app.listen(port, () => {
  console.log(`Sunucu ${port} portunda çalışıyor...`);
});